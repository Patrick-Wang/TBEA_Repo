<components>
 <service id="servGetUserNames" transaction="transactionManager">
  <sql id="userNames" export="true"><![CDATA[
     		select
				ja.id,
				case when hr.name is null then ja.name
				else ja.name + '(' + hr.name + ')' end n2
			from
                jygk_account ja left join hr_employee hr on ja.name = hr.workNum
			where
			    ja.deprecated = 0 and
			    (hr.isInPost is null or hr.isInPost = 'Y')
			order by
				ja.id
		]]></sql>
 </service>
 <service id="servGetRoleNames" transaction="transactionManager">
  <sql id="roleNames" export="true">
			select id, roleName	from roles order by id
		</sql>
 </service>
 <service id="servGetUserRoles" transaction="transactionManager">
  <sql id="userRoles" export="true"><![CDATA[
			select 
				ja.id,
				ja.name n1,
				hr.name n2,
				roles = stuff((select ',' +  r.roleName from user_roles ur left join roles r on ur.roleId = r.id  where userId = ja.ID for XML path('')), 1 , 1 , '') 
			from
                jygk_account ja left join hr_employee hr on ja.name = hr.workNum
			where
			    ja.deprecated = 0 and
			    (hr.isInPost is null or hr.isInPost = 'Y') and
				(1 = ${(uids.size == 1 &&  uids[0] == -1) ? 1 :0 } or ja.id in (${uids}))
			order by
				ja.id
    ]]></sql>
 </service>
 <service id="servSubmitUserRoles" transaction="transactionManager">
 <sql>
 	delete from user_roles where userId in ${users}
 	</sql>
 <loop from="0" to="${users.size - 1}" var="i">
 	<sql>
 		insert into user_roles (userId, roleId) values
 		(${users[i]}, (select id from roles where roleName = ${roles[i]}))
 	</sql>
 </loop>
 </service>
 <service id="servUserMgrCreateUser" transaction="transactionManager">
 	<sql id="userCount" export="true">
 		select count(*) from jygk_account where name = ${userName}
 	</sql>
 	<if test="${userCount[0] == 0}">
	 	<sql>
	 		insert into jygk_account (name, password, role, deprecated) values
	 		('${userName}', '${userPsw}', 0, 0)
	 	</sql>
 	</if>
 </service>
 <controller id="userMgrSubmit">
  <context key="users" value="${request.users.asList}"/>
  <context key="roles" value="${request.roles.asJsonArray}"/>
  <callservice id="servSubmitUserRoles"/>
  <response type="json">
   <errorCode>0</errorCode>
   <message>OK</message>
  </response>
 </controller>
 <controller id="userMgrUpdate">
 <context key="uids" value="${request.uids.asList}"/>
  <callservice id="servGetUserRoles"/>
  <response type="json">
   <data>${userRoles}</data>
  </response>
 </controller>
 <controller id="userMgrGetUser">
  <callservice id="servGetUserNames"/>
  <response type="json">
   <users>${userNames}</users>
  </response>
 </controller>
  <controller id="userMgrCreateUser">
  <context key="userName" value="${request.userName.asString}"/>
  <context key="userPsw" value="${request.userPsw.asString}"/>
  <callservice id="servUserMgrCreateUser"/>
  <response type="json">
   <errorCode>${userCount[0] == 0 ? 0 : -1}</errorCode>
   <message>${userCount[0] == 0 ? 'OK' : 'ERROR'}</message>
  </response>
 </controller>
 <controller id="userMgr">
  <callservice id="servGetUserNames"/>
  <callservice id="servGetRoleNames"/>
  <response type="jsp" name="authorityMgr/userMgr">
   <map key="users" value="${userNames.asJson}"/>
   <map key="roles" value="${roleNames.asJson}"/>
   <map key="updateUrl" value="userMgrUpdate"/>
   <map key="submitUrl" value="userMgrSubmit"/>
   <map key="createUserUrl" value="userMgrCreateUser"/>
   <map key="getUserUrl" value="userMgrGetUser"/>
  </response>
 </controller>
</components>
