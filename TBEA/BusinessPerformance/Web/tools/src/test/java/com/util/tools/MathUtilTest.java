package com.util.tools;

import junit.framework.TestCase;

import java.io.File;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.net.URISyntaxException;
import java.util.Base64;

public class MathUtilTest extends TestCase {

	public void testSumDoubleArray() throws URISyntaxException {
		System.out.println(PathUtil.getClassRoot());
	}

	public void testSumListOfDouble() throws IOException {
		byte[] ret = Base64.getDecoder().decode("");
		File f = new File("D:\\abc.xlsx");
		FileOutputStream out = new FileOutputStream(f);
		out.write(ret);
		out.flush();
		out.close();
	}

	public void testSumIntegerArray() {
		fail("Not yet implemented");
	}

	public void testSumDoubleDouble() {
		fail("Not yet implemented");
	}

	public void testIsZero() {
		fail("Not yet implemented");
	}

	public void testIsPositive() {
		fail("Not yet implemented");
	}

	public void testIsNegative() {
		fail("Not yet implemented");
	}

	public void testDivisionDoubleDouble() {
		fail("Not yet implemented");
	}

	public void testMul() {
		fail("Not yet implemented");
	}

	public void testToDoubleString() {
		fail("Not yet implemented");
	}

	public void testToIntegerString() {
		fail("Not yet implemented");
	}

	public void testTrimZero() {
		fail("Not yet implemented");
	}

	public void testMinusDoubleDouble() {
		fail("Not yet implemented");
	}

	public void testO2d() {
		fail("Not yet implemented");
	}

	public void testDivisionIntegerInteger() {
		fail("Not yet implemented");
	}

	public void testToIntegerDouble() {
		fail("Not yet implemented");
	}

	public void testToDoubleInteger() {
		fail("Not yet implemented");
	}

	public void testMinusIntegerInteger() {
		fail("Not yet implemented");
	}

	public void testSumIntegerInteger() {
		fail("Not yet implemented");
	}

	public void testMax() {
		fail("Not yet implemented");
	}

	public void testMin() {
		fail("Not yet implemented");
	}

	public void testCurrency() {
		String currency = MathUtil.currency("2876689812348781.2");
		System.out.println(currency);
		currency = MathUtil.currency("81.2123");
		System.out.println(currency);
		currency = MathUtil.currency("281.2123");
		System.out.println(currency);
		currency = MathUtil.currency("281");
		System.out.println(currency);
		currency = MathUtil.currency("81");
		System.out.println(currency);
		currency = MathUtil.currency("123281");
		System.out.println(currency);
	}

}
